import { useEffect, useState } from "react";
import { useLocation } from "wouter";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import type { Article, Program, Activity, AdmissionStep, MediaCover } from "@shared/schema";

export default function AdminDashboard() {
  const [, setLocation] = useLocation();
  const { toast } = useToast();
  const queryClient = useQueryClient();

  // Ki·ªÉm tra ƒëƒÉng nh·∫≠p
  useEffect(() => {
    const token = localStorage.getItem("admin-token");
    if (!token) {
      setLocation("/admin/login");
    }
  }, [setLocation]);

  const { data: articles } = useQuery<Article[]>({ queryKey: ["/api/articles"] });
  const { data: programs } = useQuery<Program[]>({ queryKey: ["/api/programs"] });
  const { data: activities } = useQuery<Activity[]>({ queryKey: ["/api/activities"] });
  const { data: admissionSteps } = useQuery<AdmissionStep[]>({ queryKey: ["/api/admission-steps"] });
  const { data: mediaCovers } = useQuery<MediaCover[]>({ queryKey: ["/api/media-covers"] });

  // Form states
  const [contactInfo, setContactInfo] = useState({
    phone: "0856318686",
    email: "mamnonthaonguyenxanh@gmail.com",
    address: "To√† nh√† Th·∫£o Nguy√™n Xanh, ƒë∆∞·ªùng L√Ω Th√°i T·ªï, t·ªï 4, ph∆∞·ªùng Ph√π V√¢n, t·ªânh Ninh B√¨nh",
    mapUrl: "https://maps.google.com/maps?q=L√Ω+Th√°i+T·ªï,+Ph√π+V√¢n,+Ninh+B√¨nh,+Vietnam&output=embed"
  });

  const [newArticle, setNewArticle] = useState({
    title: "",
    excerpt: "",
    content: "",
    category: "news",
    imageUrl: ""
  });

  const [logoUrl, setLogoUrl] = useState("");
  const [bannerUrl, setBannerUrl] = useState("");
  const [videoUrl, setVideoUrl] = useState("");

  // Edit states
  const [editingArticle, setEditingArticle] = useState<Article | null>(null);
  const [editingProgram, setEditingProgram] = useState<Program | null>(null);
  const [editingActivity, setEditingActivity] = useState<Activity | null>(null);
  const [editingAdmissionStep, setEditingAdmissionStep] = useState<AdmissionStep | null>(null);
  const [editingMediaCover, setEditingMediaCover] = useState<MediaCover | null>(null);
  const [newMediaCover, setNewMediaCover] = useState({
    outlet: "",
    title: "",
    date: "",
    type: "",
    url: ""
  });

  // Mutations
  const createArticleMutation = useMutation({
    mutationFn: async (article: typeof newArticle) => {
      const response = await apiRequest("POST", "/api/articles", article);
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/articles"] });
      toast({
        title: "T·∫°o b√†i vi·∫øt th√†nh c√¥ng",
        description: "B√†i vi·∫øt m·ªõi ƒë√£ ƒë∆∞·ª£c th√™m v√†o website",
      });
      setNewArticle({ title: "", excerpt: "", content: "", category: "news", imageUrl: "" });
    }
  });

  const updateArticleMutation = useMutation({
    mutationFn: async (article: Article) => {
      const response = await apiRequest("PUT", `/api/articles/${article.id}`, article);
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/articles"] });
      toast({
        title: "C·∫≠p nh·∫≠t b√†i vi·∫øt th√†nh c√¥ng",
        description: "B√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t",
      });
      setEditingArticle(null);
    }
  });

  const deleteArticleMutation = useMutation({
    mutationFn: async (id: number) => {
      const response = await apiRequest("DELETE", `/api/articles/${id}`);
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/articles"] });
      toast({
        title: "X√≥a b√†i vi·∫øt th√†nh c√¥ng",
        description: "B√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi website",
      });
    }
  });

  const updateProgramMutation = useMutation({
    mutationFn: async (program: Program) => {
      const response = await apiRequest("PUT", `/api/programs/${program.id}`, program);
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/programs"] });
      toast({
        title: "C·∫≠p nh·∫≠t ch∆∞∆°ng tr√¨nh th√†nh c√¥ng",
        description: "Ch∆∞∆°ng tr√¨nh ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t",
      });
      setEditingProgram(null);
    }
  });

  const updateActivityMutation = useMutation({
    mutationFn: async (activity: Activity) => {
      const response = await apiRequest("PUT", `/api/activities/${activity.id}`, activity);
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/activities"] });
      toast({
        title: "C·∫≠p nh·∫≠t ho·∫°t ƒë·ªông th√†nh c√¥ng",
        description: "Ho·∫°t ƒë·ªông ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t",
      });
      setEditingActivity(null);
    }
  });

  const updateAdmissionStepMutation = useMutation({
    mutationFn: async (step: AdmissionStep) => {
      const response = await apiRequest("PUT", `/api/admission-steps/${step.id}`, step);
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/admission-steps"] });
      toast({
        title: "C·∫≠p nh·∫≠t b∆∞·ªõc tuy·ªÉn sinh th√†nh c√¥ng",
        description: "B∆∞·ªõc tuy·ªÉn sinh ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t",
      });
      setEditingAdmissionStep(null);
    }
  });

  const createMediaCoverMutation = useMutation({
    mutationFn: async (cover: typeof newMediaCover) => {
      const response = await apiRequest("POST", "/api/media-covers", cover);
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/media-covers"] });
      toast({
        title: "Th√™m b√†i vi·∫øt b√°o ch√≠ th√†nh c√¥ng",
        description: "B√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c th√™m v√†o m·ª•c b√°o ch√≠",
      });
      setNewMediaCover({
        outlet: "",
        title: "",
        date: "",
        type: "",
        url: ""
      });
    }
  });

  const updateMediaCoverMutation = useMutation({
    mutationFn: async (cover: MediaCover) => {
      const response = await apiRequest("PUT", `/api/media-covers/${cover.id}`, cover);
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/media-covers"] });
      toast({
        title: "C·∫≠p nh·∫≠t b√†i vi·∫øt b√°o ch√≠ th√†nh c√¥ng",
        description: "B√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t",
      });
      setEditingMediaCover(null);
    }
  });

  const deleteMediaCoverMutation = useMutation({
    mutationFn: async (id: number) => {
      const response = await apiRequest("DELETE", `/api/media-covers/${id}`);
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/media-covers"] });
      toast({
        title: "X√≥a b√†i vi·∫øt b√°o ch√≠ th√†nh c√¥ng",
        description: "B√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi m·ª•c b√°o ch√≠",
      });
    }
  });

  const logout = () => {
    localStorage.removeItem("admin-token");
    setLocation("/admin/login");
  };

  const handleCreateArticle = () => {
    if (newArticle.title && newArticle.content) {
      createArticleMutation.mutate(newArticle);
    }
  };

  const saveContactInfo = () => {
    toast({
      title: "L∆∞u th√¥ng tin th√†nh c√¥ng",
      description: "Th√¥ng tin li√™n h·ªá ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t",
    });
  };

  const handleImageUpload = (type: 'logo' | 'banner' | 'article' | 'admission-step') => (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        const result = e.target?.result as string;
        if (type === 'logo') setLogoUrl(result);
        else if (type === 'banner') setBannerUrl(result);
        else if (type === 'article') setNewArticle(prev => ({ ...prev, imageUrl: result }));
        else if (type === 'admission-step' && editingAdmissionStep) {
          setEditingAdmissionStep(prev => prev ? { ...prev, iconUrl: result } : null);
        }
      };
      reader.readAsDataURL(file);
    }
  };

  const handleVideoUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        const result = e.target?.result as string;
        setVideoUrl(result);
      };
      reader.readAsDataURL(file);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="bg-white shadow-sm border-b">
        <div className="container mx-auto px-4 py-4 flex justify-between items-center">
          <h1 className="text-2xl font-bold text-dark-gray">üè´ Qu·∫£n tr·ªã M·∫ßm Non Th·∫£o Nguy√™n Xanh</h1>
          <div className="flex items-center space-x-4">
            <span className="text-sm text-gray-600">Xin ch√†o Admin</span>
            <Button variant="outline" onClick={logout}>
              ƒêƒÉng xu·∫•t
            </Button>
          </div>
        </div>
      </div>

      <div className="container mx-auto px-4 py-8">
        <Tabs defaultValue="contact" className="space-y-6">
          <TabsList className="grid w-full grid-cols-11">
            <TabsTrigger value="contact">üìû Li√™n h·ªá</TabsTrigger>
            <TabsTrigger value="media">üñºÔ∏è ·∫¢nh/Video</TabsTrigger>
            <TabsTrigger value="homepage">üè† Trang ch·ªß</TabsTrigger>
            <TabsTrigger value="about">‚ÑπÔ∏è Gi·ªõi thi·ªáu</TabsTrigger>
            <TabsTrigger value="library">üìö Th∆∞ vi·ªán</TabsTrigger>
            <TabsTrigger value="admission">üéì Tuy·ªÉn sinh</TabsTrigger>
            <TabsTrigger value="articles">üì∞ B√†i vi·∫øt</TabsTrigger>
            <TabsTrigger value="programs">üìö Ch∆∞∆°ng tr√¨nh</TabsTrigger>
            <TabsTrigger value="activities">üéØ Ho·∫°t ƒë·ªông</TabsTrigger>
            <TabsTrigger value="media-covers">üì∫ B√°o ch√≠</TabsTrigger>
            <TabsTrigger value="social-media">üåê M·∫°ng x√£ h·ªôi</TabsTrigger>
          </TabsList>

          <TabsContent value="contact">
            <Card>
              <CardHeader>
                <CardTitle>üìû Th√¥ng tin li√™n h·ªá</CardTitle>
                <CardDescription>C·∫≠p nh·∫≠t th√¥ng tin li√™n h·ªá c·ªßa tr∆∞·ªùng</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="phone">üì± S·ªë ƒëi·ªán tho·∫°i</Label>
                    <Input
                      id="phone"
                      value={contactInfo.phone}
                      onChange={(e) => setContactInfo(prev => ({ ...prev, phone: e.target.value }))}
                      placeholder="0123456789"
                    />
                  </div>
                  <div>
                    <Label htmlFor="email">‚úâÔ∏è Email</Label>
                    <Input
                      id="email"
                      value={contactInfo.email}
                      onChange={(e) => setContactInfo(prev => ({ ...prev, email: e.target.value }))}
                      placeholder="email@example.com"
                    />
                  </div>
                </div>
                <div>
                  <Label htmlFor="address">üìç ƒê·ªãa ch·ªâ</Label>
                  <Textarea
                    id="address"
                    value={contactInfo.address}
                    onChange={(e) => setContactInfo(prev => ({ ...prev, address: e.target.value }))}
                    rows={3}
                    placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ tr∆∞·ªùng..."
                  />
                </div>
                <div>
                  <Label htmlFor="mapUrl">üó∫Ô∏è Google Maps URL</Label>
                  <Input
                    id="mapUrl"
                    value={contactInfo.mapUrl}
                    onChange={(e) => setContactInfo(prev => ({ ...prev, mapUrl: e.target.value }))}
                    placeholder="https://maps.google.com/maps?q=..."
                  />
                </div>
                <Button onClick={saveContactInfo} className="w-full">
                  üíæ L∆∞u th√¥ng tin li√™n h·ªá
                </Button>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="media">
            <div className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle>üñºÔ∏è Qu·∫£n l√Ω ·∫£nh v√† video</CardTitle>
                  <CardDescription>Upload ·∫£nh logo, banner v√† video gi·ªõi thi·ªáu</CardDescription>
                </CardHeader>
                <CardContent className="space-y-6">
                  <div className="grid grid-cols-2 gap-6">
                    <div>
                      <Label>üè∑Ô∏è Logo tr∆∞·ªùng</Label>
                      <div className="mt-2 space-y-2">
                        <Input
                          type="file"
                          accept="image/*"
                          onChange={handleImageUpload('logo')}
                          className="cursor-pointer"
                        />
                        {logoUrl && (
                          <div className="border rounded-lg p-2">
                            <img src={logoUrl} alt="Logo" className="max-w-full h-20 object-contain" />
                          </div>
                        )}
                      </div>
                    </div>
                    <div>
                      <Label>üé® Banner trang ch·ªß</Label>
                      <div className="mt-2 space-y-2">
                        <Input
                          type="file"
                          accept="image/*"
                          onChange={handleImageUpload('banner')}
                          className="cursor-pointer"
                        />
                        {bannerUrl && (
                          <div className="border rounded-lg p-2">
                            <img src={bannerUrl} alt="Banner" className="max-w-full h-20 object-cover" />
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                  <div>
                    <Label>üé¨ Video gi·ªõi thi·ªáu</Label>
                    <div className="mt-2 space-y-2">
                      <Input
                        type="file"
                        accept="video/*"
                        onChange={handleVideoUpload}
                        className="cursor-pointer"
                      />
                      {videoUrl && (
                        <div className="border rounded-lg p-2">
                          <video controls className="max-w-full h-32">
                            <source src={videoUrl} type="video/mp4" />
                            Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ video.
                          </video>
                        </div>
                      )}
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="articles">
            <div className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle>üìù T·∫°o b√†i vi·∫øt m·ªõi</CardTitle>
                  <CardDescription>Th√™m tin t·ª©c v√† th√¥ng b√°o m·ªõi</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <Label htmlFor="title">üì∞ Ti√™u ƒë·ªÅ</Label>
                    <Input
                      id="title"
                      value={newArticle.title}
                      onChange={(e) => setNewArticle(prev => ({ ...prev, title: e.target.value }))}
                      placeholder="Nh·∫≠p ti√™u ƒë·ªÅ b√†i vi·∫øt..."
                    />
                  </div>
                  <div>
                    <Label htmlFor="category">üìÇ Danh m·ª•c</Label>
                    <select
                      id="category"
                      value={newArticle.category}
                      onChange={(e) => setNewArticle(prev => ({ ...prev, category: e.target.value }))}
                      className="w-full p-2 border rounded-md"
                    >
                      <option value="news">üì∞ Tin t·ª©c</option>
                      <option value="announcement">üì¢ Th√¥ng b√°o</option>
                      <option value="event">üéâ S·ª± ki·ªán</option>
                    </select>
                  </div>
                  <div>
                    <Label htmlFor="articleImage">üñºÔ∏è ·∫¢nh b√†i vi·∫øt</Label>
                    <Input
                      type="file"
                      accept="image/*"
                      onChange={handleImageUpload('article')}
                      className="cursor-pointer"
                    />
                    {newArticle.imageUrl && (
                      <div className="mt-2 border rounded-lg p-2">
                        <img src={newArticle.imageUrl} alt="Article" className="max-w-full h-32 object-cover" />
                      </div>
                    )}
                  </div>
                  <div>
                    <Label htmlFor="excerpt">üìÑ T√≥m t·∫Øt</Label>
                    <Textarea
                      id="excerpt"
                      value={newArticle.excerpt}
                      onChange={(e) => setNewArticle(prev => ({ ...prev, excerpt: e.target.value }))}
                      rows={3}
                      placeholder="Nh·∫≠p t√≥m t·∫Øt b√†i vi·∫øt..."
                    />
                  </div>
                  <div>
                    <Label htmlFor="content">üìù N·ªôi dung</Label>
                    <Textarea
                      id="content"
                      value={newArticle.content}
                      onChange={(e) => setNewArticle(prev => ({ ...prev, content: e.target.value }))}
                      rows={6}
                      placeholder="Nh·∫≠p n·ªôi dung b√†i vi·∫øt..."
                    />
                  </div>
                  <Button onClick={handleCreateArticle} disabled={createArticleMutation.isPending} className="w-full">
                    {createArticleMutation.isPending ? "ƒêang t·∫°o..." : "‚ú® T·∫°o b√†i vi·∫øt"}
                  </Button>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>üìã Danh s√°ch b√†i vi·∫øt ({articles?.length || 0})</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    {articles?.map((article) => (
                      <div key={article.id} className="border rounded-lg p-4 hover:bg-gray-50">
                        <div className="flex justify-between items-start">
                          <div className="flex-1">
                            <h3 className="font-semibold text-lg">{article.title}</h3>
                            <p className="text-sm text-gray-600 mt-1">
                              {article.category === 'news' ? 'üì∞' : article.category === 'announcement' ? 'üì¢' : 'üéâ'} {article.category}
                            </p>
                            <p className="text-sm mt-2 text-gray-700">{article.content.substring(0, 100)}...</p>
                          </div>
                          <div className="flex flex-col items-end space-y-2">
                            <div className="text-xs text-gray-500">
                              {new Date(article.publishedAt).toLocaleDateString('vi-VN')}
                            </div>
                            <div className="flex space-x-2">
                              <Button
                                size="sm"
                                variant="outline"
                                onClick={() => setEditingArticle(article)}
                                className="text-blue-600 hover:text-blue-800"
                              >
                                ‚úèÔ∏è S·ª≠a
                              </Button>
                              <Button
                                size="sm"
                                variant="outline"
                                onClick={() => deleteArticleMutation.mutate(article.id)}
                                className="text-red-600 hover:text-red-800"
                                disabled={deleteArticleMutation.isPending}
                              >
                                üóëÔ∏è X√≥a
                              </Button>
                            </div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="programs">
            <Card>
              <CardHeader>
                <CardTitle>üìö Ch∆∞∆°ng tr√¨nh h·ªçc</CardTitle>
                <CardDescription>Qu·∫£n l√Ω c√°c ch∆∞∆°ng tr√¨nh v√† h·ªçc ph√≠</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {programs?.map((program) => (
                    <div key={program.id} className="border rounded-lg p-4">
                      <div className="flex justify-between items-start">
                        <div className="flex-1">
                          <h3 className="font-semibold text-lg">{program.name}</h3>
                          <p className="text-sm text-gray-600 mt-1">{program.description}</p>
                          <p className="text-sm mt-2">
                            <span className="font-medium">ƒê·ªô tu·ªïi:</span> {program.ageRange} | 
                            <span className="font-medium"> S·ªâ s·ªë:</span> {program.capacity} h·ªçc sinh
                          </p>
                        </div>
                        <div className="text-right">
                          <p className="text-xl font-bold text-primary-green">
                            {program.tuition.toLocaleString('vi-VN')} VNƒê/th√°ng
                          </p>
                          <p className="text-xs text-gray-500 mt-1">
                            C·∫≠p nh·∫≠t: {new Date(program.updatedAt).toLocaleDateString('vi-VN')}
                          </p>
                          <div className="flex space-x-2 mt-2">
                            <Button
                              size="sm"
                              variant="outline"
                              onClick={() => setEditingProgram(program)}
                              className="text-blue-600 hover:text-blue-800"
                            >
                              ‚úèÔ∏è S·ª≠a
                            </Button>
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="homepage">
            <Card>
              <CardHeader>
                <CardTitle>üè† Ch·ªânh s·ª≠a trang ch·ªß</CardTitle>
                <CardDescription>C·∫≠p nh·∫≠t n·ªôi dung trang ch·ªß</CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="space-y-4">
                  <h3 className="font-semibold text-lg">üéØ Ph·∫ßn Hero</h3>
                  <div>
                    <Label htmlFor="hero-title">üìù Ti√™u ƒë·ªÅ ch√≠nh</Label>
                    <Input
                      id="hero-title"
                      defaultValue="Ch√†o m·ª´ng ƒë·∫øn v·ªõi M·∫ßm Non Th·∫£o Nguy√™n Xanh"
                      placeholder="Nh·∫≠p ti√™u ƒë·ªÅ ch√≠nh..."
                    />
                  </div>
                  <div>
                    <Label htmlFor="hero-subtitle">üìù M√¥ t·∫£ ng·∫Øn</Label>
                    <Textarea
                      id="hero-subtitle"
                      defaultValue="N∆°i nu√¥i d∆∞·ª°ng t∆∞∆°ng lai c·ªßa tr·∫ª em v·ªõi t√¨nh y√™u th∆∞∆°ng v√† chƒÉm s√≥c t·∫≠n t√¢m"
                      placeholder="Nh·∫≠p m√¥ t·∫£ ng·∫Øn..."
                      rows={3}
                    />
                  </div>
                  <div>
                    <Label htmlFor="hero-image">üñºÔ∏è ·∫¢nh n·ªÅn Hero</Label>
                    <Input
                      type="file"
                      accept="image/*"
                      className="cursor-pointer"
                    />
                  </div>
                </div>

                <div className="space-y-4">
                  <h3 className="font-semibold text-lg">‚ú® T√≠nh nƒÉng n·ªïi b·∫≠t</h3>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div className="border rounded-lg p-4">
                      <h4 className="font-medium">üéì Gi√°o d·ª•c ch·∫•t l∆∞·ª£ng</h4>
                      <Textarea
                        defaultValue="Ph∆∞∆°ng ph√°p gi·∫£ng d·∫°y hi·ªán ƒë·∫°i, ph√π h·ª£p v·ªõi t·ª´ng ƒë·ªô tu·ªïi"
                        rows={2}
                        className="mt-2"
                      />
                    </div>
                    <div className="border rounded-lg p-4">
                      <h4 className="font-medium">üè• An to√†n tuy·ªát ƒë·ªëi</h4>
                      <Textarea
                        defaultValue="M√¥i tr∆∞·ªùng h·ªçc t·∫≠p an to√†n, s·∫°ch s·∫Ω v√† th√¢n thi·ªán"
                        rows={2}
                        className="mt-2"
                      />
                    </div>
                    <div className="border rounded-lg p-4">
                      <h4 className="font-medium">üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Ph√°t tri·ªÉn to√†n di·ªán</h4>
                      <Textarea
                        defaultValue="Ph√°t tri·ªÉn c·∫£ v·ªÅ th·ªÉ ch·∫•t, tr√≠ tu·ªá v√† t√¨nh c·∫£m"
                        rows={2}
                        className="mt-2"
                      />
                    </div>
                  </div>
                </div>

                <Button className="w-full">
                  üíæ L∆∞u thay ƒë·ªïi trang ch·ªß
                </Button>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="about">
            <Card>
              <CardHeader>
                <CardTitle>‚ÑπÔ∏è Ch·ªânh s·ª≠a trang gi·ªõi thi·ªáu</CardTitle>
                <CardDescription>C·∫≠p nh·∫≠t th√¥ng tin v·ªÅ tr∆∞·ªùng</CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="space-y-4">
                  <h3 className="font-semibold text-lg">üìã Th√¥ng tin c∆° b·∫£n</h3>
                  <div>
                    <Label htmlFor="about-history">üìö L·ªãch s·ª≠ tr∆∞·ªùng</Label>
                    <Textarea
                      id="about-history"
                      defaultValue="M·∫ßm Non Th·∫£o Nguy√™n Xanh ƒë∆∞·ª£c th√†nh l·∫≠p nƒÉm 2010 v·ªõi m·ª•c ti√™u mang ƒë·∫øn m√¥i tr∆∞·ªùng gi√°o d·ª•c ch·∫•t l∆∞·ª£ng cao cho tr·∫ª em..."
                      placeholder="Nh·∫≠p l·ªãch s·ª≠ tr∆∞·ªùng..."
                      rows={4}
                    />
                  </div>
                  <div>
                    <Label htmlFor="about-mission">üéØ S·ª© m·ªánh</Label>
                    <Textarea
                      id="about-mission"
                      defaultValue="Nu√¥i d∆∞·ª°ng v√† ph√°t tri·ªÉn to√†n di·ªán tr·∫ª em trong m√¥i tr∆∞·ªùng y√™u th∆∞∆°ng, an to√†n v√† s√°ng t·∫°o..."
                      placeholder="Nh·∫≠p s·ª© m·ªánh..."
                      rows={3}
                    />
                  </div>
                  <div>
                    <Label htmlFor="about-vision">üåü T·∫ßm nh√¨n</Label>
                    <Textarea
                      id="about-vision"
                      defaultValue="Tr·ªü th√†nh tr∆∞·ªùng m·∫ßm non h√†ng ƒë·∫ßu trong vi·ªác gi√°o d·ª•c v√† ph√°t tri·ªÉn tr·∫ª em..."
                      placeholder="Nh·∫≠p t·∫ßm nh√¨n..."
                      rows={3}
                    />
                  </div>
                </div>

                <div className="space-y-4">
                  <h3 className="font-semibold text-lg">üë• ƒê·ªôi ng≈© gi√°o vi√™n</h3>
                  <div>
                    <Label htmlFor="about-teachers">üë®‚Äçüè´ Gi·ªõi thi·ªáu ƒë·ªôi ng≈©</Label>
                    <Textarea
                      id="about-teachers"
                      defaultValue="ƒê·ªôi ng≈© gi√°o vi√™n gi√†u kinh nghi·ªám, t·∫≠n t√¢m v√† ƒë∆∞·ª£c ƒë√†o t·∫°o chuy√™n nghi·ªáp..."
                      placeholder="Nh·∫≠p gi·ªõi thi·ªáu ƒë·ªôi ng≈©..."
                      rows={4}
                    />
                  </div>
                  <div>
                    <Label htmlFor="about-image">üñºÔ∏è ·∫¢nh gi·ªõi thi·ªáu</Label>
                    <Input
                      type="file"
                      accept="image/*"
                      className="cursor-pointer"
                    />
                  </div>
                </div>

                <Button className="w-full">
                  üíæ L∆∞u thay ƒë·ªïi gi·ªõi thi·ªáu
                </Button>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="library">
            <Card>
              <CardHeader>
                <CardTitle>üìö Th∆∞ vi·ªán ph·ª• huynh</CardTitle>
                <CardDescription>Qu·∫£n l√Ω t√†i li·ªáu v√† h∆∞·ªõng d·∫´n cho ph·ª• huynh</CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="space-y-4">
                  <h3 className="font-semibold text-lg">üìÑ T√†i li·ªáu hi·ªán c√≥</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="border rounded-lg p-4">
                      <h4 className="font-medium">üìã H∆∞·ªõng d·∫´n chu·∫©n b·ªã ƒë·ªì d√πng</h4>
                      <p className="text-sm text-gray-600 mt-1">Danh s√°ch ƒë·ªì d√πng c·∫ßn thi·∫øt cho nƒÉm h·ªçc</p>
                      <div className="flex space-x-2 mt-2">
                        <Button size="sm" variant="outline">‚úèÔ∏è S·ª≠a</Button>
                        <Button size="sm" variant="outline">üóëÔ∏è X√≥a</Button>
                      </div>
                    </div>
                    <div className="border rounded-lg p-4">
                      <h4 className="font-medium">üìã Quy ƒë·ªãnh nh√† tr∆∞·ªùng</h4>
                      <p className="text-sm text-gray-600 mt-1">C√°c quy ƒë·ªãnh v√† n·ªôi quy c·ªßa tr∆∞·ªùng</p>
                      <div className="flex space-x-2 mt-2">
                        <Button size="sm" variant="outline">‚úèÔ∏è S·ª≠a</Button>
                        <Button size="sm" variant="outline">üóëÔ∏è X√≥a</Button>
                      </div>
                    </div>
                  </div>
                </div>

                <div className="space-y-4">
                  <h3 className="font-semibold text-lg">‚ûï Th√™m t√†i li·ªáu m·ªõi</h3>
                  <div>
                    <Label htmlFor="doc-title">üìù Ti√™u ƒë·ªÅ t√†i li·ªáu</Label>
                    <Input
                      id="doc-title"
                      placeholder="Nh·∫≠p ti√™u ƒë·ªÅ t√†i li·ªáu..."
                    />
                  </div>
                  <div>
                    <Label htmlFor="doc-description">üìù M√¥ t·∫£</Label>
                    <Textarea
                      id="doc-description"
                      placeholder="Nh·∫≠p m√¥ t·∫£ t√†i li·ªáu..."
                      rows={3}
                    />
                  </div>
                  <div>
                    <Label htmlFor="doc-file">üìé T·ªáp t√†i li·ªáu</Label>
                    <Input
                      type="file"
                      accept=".pdf,.doc,.docx"
                      className="cursor-pointer"
                    />
                  </div>
                </div>

                <Button className="w-full">
                  üíæ Th√™m t√†i li·ªáu m·ªõi
                </Button>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="admission">
            <Card>
              <CardHeader>
                <CardTitle>üéì Ch·ªânh s·ª≠a th√¥ng tin tuy·ªÉn sinh</CardTitle>
                <CardDescription>C·∫≠p nh·∫≠t th√¥ng tin tuy·ªÉn sinh v√† ƒëƒÉng k√Ω</CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="space-y-4">
                  <h3 className="font-semibold text-lg">üìã Th√¥ng tin tuy·ªÉn sinh</h3>
                  <div>
                    <Label htmlFor="admission-info">üìù Th√¥ng tin chung</Label>
                    <Textarea
                      id="admission-info"
                      defaultValue="M·∫ßm Non Th·∫£o Nguy√™n Xanh tuy·ªÉn sinh nƒÉm h·ªçc 2024-2025 cho c√°c l·ªõp t·ª´ 18 th√°ng ƒë·∫øn 5 tu·ªïi..."
                      placeholder="Nh·∫≠p th√¥ng tin tuy·ªÉn sinh..."
                      rows={4}
                    />
                  </div>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <Label htmlFor="admission-age">üë∂ ƒê·ªô tu·ªïi tuy·ªÉn sinh</Label>
                      <Input
                        id="admission-age"
                        defaultValue="18 th√°ng - 5 tu·ªïi"
                        placeholder="Nh·∫≠p ƒë·ªô tu·ªïi..."
                      />
                    </div>
                    <div>
                      <Label htmlFor="admission-deadline">üìÖ H·∫°n ƒëƒÉng k√Ω</Label>
                      <Input
                        type="date"
                        id="admission-deadline"
                        defaultValue="2024-08-15"
                      />
                    </div>
                  </div>
                </div>

                <div className="space-y-4">
                  <h3 className="font-semibold text-lg">üìã H·ªì s∆° c·∫ßn thi·∫øt</h3>
                  <div>
                    <Label htmlFor="admission-documents">üìÑ Danh s√°ch h·ªì s∆°</Label>
                    <Textarea
                      id="admission-documents"
                      defaultValue="- ƒê∆°n ƒëƒÉng k√Ω nh·∫≠p h·ªçc&#10;- B·∫£n sao gi·∫•y khai sinh&#10;- S·ªï s·ª©c kh·ªèe&#10;- 4 ·∫£nh 3x4 c·ªßa b√©"
                      placeholder="Nh·∫≠p danh s√°ch h·ªì s∆°..."
                      rows={6}
                    />
                  </div>
                </div>

                <div className="space-y-4">
                  <h3 className="font-semibold text-lg">üí∞ H·ªçc ph√≠</h3>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div>
                      <Label htmlFor="tuition-nursery">üçº L·ªõp Nh√† Tr·∫ª</Label>
                      <Input
                        type="number"
                        id="tuition-nursery"
                        defaultValue="4000000"
                        placeholder="H·ªçc ph√≠ (VNƒê)"
                      />
                    </div>
                    <div>
                      <Label htmlFor="tuition-kindergarten">üé® L·ªõp M·∫´u Gi√°o</Label>
                      <Input
                        type="number"
                        id="tuition-kindergarten"
                        defaultValue="4000000"
                        placeholder="H·ªçc ph√≠ (VNƒê)"
                      />
                    </div>
                    <div>
                      <Label htmlFor="tuition-preschool">üéì L·ªõp Chu·∫©n B·ªã</Label>
                      <Input
                        type="number"
                        id="tuition-preschool"
                        defaultValue="4000000"
                        placeholder="H·ªçc ph√≠ (VNƒê)"
                      />
                    </div>
                  </div>
                </div>

                <Button className="w-full">
                  üíæ L∆∞u thay ƒë·ªïi tuy·ªÉn sinh
                </Button>
              </CardContent>
            </Card>
            
            <Card>
              <CardHeader>
                <CardTitle>üîÑ Quy tr√¨nh tuy·ªÉn sinh</CardTitle>
                <CardDescription>Qu·∫£n l√Ω c√°c b∆∞·ªõc trong quy tr√¨nh tuy·ªÉn sinh</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {admissionSteps?.map((step) => (
                    <div key={step.id} className="border rounded-lg p-4">
                      <div className="flex items-start space-x-4">
                        <div className="w-16 h-16 rounded-full overflow-hidden shadow-md">
                          <img 
                            src={step.iconUrl} 
                            alt={step.title}
                            className="w-full h-full object-cover"
                          />
                        </div>
                        <div className="flex-1">
                          <div className="flex items-center space-x-2">
                            <span className="inline-block bg-accent-yellow text-white font-bold text-xs px-2 py-1 rounded-full">
                              {step.stepNumber.toString().padStart(2, '0')}
                            </span>
                            <h3 className="font-semibold text-lg">{step.title}</h3>
                          </div>
                          <p className="text-sm text-gray-600 mt-1">{step.description}</p>
                        </div>
                        <div className="flex space-x-2">
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => setEditingAdmissionStep(step)}
                            className="text-blue-600 hover:text-blue-800"
                          >
                            ‚úèÔ∏è S·ª≠a
                          </Button>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="programs">
            <Card>
              <CardHeader>
                <CardTitle>üìö Ch∆∞∆°ng tr√¨nh h·ªçc</CardTitle>
                <CardDescription>Qu·∫£n l√Ω c√°c ch∆∞∆°ng tr√¨nh v√† h·ªçc ph√≠</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {programs?.map((program) => (
                    <div key={program.id} className="border rounded-lg p-4">
                      <div className="flex justify-between items-start">
                        <div className="flex-1">
                          <h3 className="font-semibold text-lg">{program.name}</h3>
                          <p className="text-sm text-gray-600 mt-1">{program.description}</p>
                          <p className="text-sm mt-2">
                            <span className="font-medium">ƒê·ªô tu·ªïi:</span> {program.ageRange} | 
                            <span className="font-medium"> S·ªâ s·ªë:</span> {program.capacity} h·ªçc sinh
                          </p>
                        </div>
                        <div className="text-right">
                          <p className="text-xl font-bold text-primary-green">
                            {program.tuition.toLocaleString('vi-VN')} VNƒê/th√°ng
                          </p>
                          <p className="text-xs text-gray-500 mt-1">
                            C·∫≠p nh·∫≠t: {new Date(program.updatedAt).toLocaleDateString('vi-VN')}
                          </p>
                          <div className="flex space-x-2 mt-2">
                            <Button
                              size="sm"
                              variant="outline"
                              onClick={() => setEditingProgram(program)}
                              className="text-blue-600 hover:text-blue-800"
                            >
                              ‚úèÔ∏è S·ª≠a
                            </Button>
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="activities">
            <Card>
              <CardHeader>
                <CardTitle>üéØ Ho·∫°t ƒë·ªông tr∆∞·ªùng h·ªçc</CardTitle>
                <CardDescription>Qu·∫£n l√Ω c√°c ho·∫°t ƒë·ªông v√† s·ª± ki·ªán</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {activities?.map((activity) => (
                    <div key={activity.id} className="border rounded-lg p-4">
                      <div className="flex justify-between items-start">
                        <div className="flex-1">
                          <h3 className="font-semibold text-lg">{activity.name}</h3>
                          <p className="text-sm text-gray-600 mt-1">{activity.description}</p>
                          <p className="text-sm mt-2">
                            <span className="font-medium">üìÖ Ng√†y:</span> {new Date(activity.date).toLocaleDateString('vi-VN')}
                          </p>
                          {activity.location && (
                            <p className="text-sm">
                              <span className="font-medium">üìç ƒê·ªãa ƒëi·ªÉm:</span> {activity.location}
                            </p>
                          )}
                        </div>
                        <div className="flex items-center space-x-4">
                          {activity.imageUrl && (
                            <div>
                              <img src={activity.imageUrl} alt={activity.name} className="w-16 h-16 object-cover rounded" />
                            </div>
                          )}
                          <div className="flex space-x-2">
                            <Button
                              size="sm"
                              variant="outline"
                              onClick={() => setEditingActivity(activity)}
                              className="text-blue-600 hover:text-blue-800"
                            >
                              ‚úèÔ∏è S·ª≠a
                            </Button>
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="media-covers">
            <Card>
              <CardHeader>
                <CardTitle>üì∫ B√°o ch√≠ n√≥i v·ªÅ ch√∫ng t√¥i</CardTitle>
                <CardDescription>Qu·∫£n l√Ω c√°c b√†i vi·∫øt b√°o ch√≠ ƒëƒÉng v·ªÅ tr∆∞·ªùng</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-6">
                  {/* Add new media cover form */}
                  <div className="bg-gray-50 p-4 rounded-lg">
                    <h3 className="font-semibold mb-4">‚ûï Th√™m b√†i vi·∫øt b√°o ch√≠ m·ªõi</h3>
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <Label htmlFor="new-outlet">üì∫ T√™n b√°o/ƒë√†i</Label>
                        <Input
                          id="new-outlet"
                          value={newMediaCover.outlet}
                          onChange={(e) => setNewMediaCover(prev => ({ ...prev, outlet: e.target.value }))}
                          placeholder="VD: VTV1, Tu·ªïi Tr·∫ª, VnExpress..."
                        />
                      </div>
                      <div>
                        <Label htmlFor="new-type">üì± Lo·∫°i b√°o ch√≠</Label>
                        <select
                          id="new-type"
                          value={newMediaCover.type}
                          onChange={(e) => setNewMediaCover(prev => ({ ...prev, type: e.target.value }))}
                          className="w-full p-2 border rounded-md"
                        >
                          <option value="">Ch·ªçn lo·∫°i</option>
                          <option value="TV">üì∫ Truy·ªÅn h√¨nh</option>
                          <option value="B√°o">üì∞ B√°o gi·∫•y</option>
                          <option value="Online">üíª Online</option>
                          <option value="Radio">üìª Radio</option>
                        </select>
                      </div>
                      <div>
                        <Label htmlFor="new-title">üìù Ti√™u ƒë·ªÅ b√†i vi·∫øt</Label>
                        <Input
                          id="new-title"
                          value={newMediaCover.title}
                          onChange={(e) => setNewMediaCover(prev => ({ ...prev, title: e.target.value }))}
                          placeholder="Nh·∫≠p ti√™u ƒë·ªÅ b√†i vi·∫øt..."
                        />
                      </div>
                      <div>
                        <Label htmlFor="new-date">üìÖ Ng√†y ƒëƒÉng</Label>
                        <Input
                          id="new-date"
                          value={newMediaCover.date}
                          onChange={(e) => setNewMediaCover(prev => ({ ...prev, date: e.target.value }))}
                          placeholder="VD: 20/11/2024"
                        />
                      </div>
                      <div className="col-span-2">
                        <Label htmlFor="new-url">üîó Link b√†i vi·∫øt (t√πy ch·ªçn)</Label>
                        <Input
                          id="new-url"
                          value={newMediaCover.url}
                          onChange={(e) => setNewMediaCover(prev => ({ ...prev, url: e.target.value }))}
                          placeholder="https://..."
                        />
                      </div>
                    </div>
                    <Button
                      onClick={() => createMediaCoverMutation.mutate(newMediaCover)}
                      className="mt-4"
                      disabled={!newMediaCover.outlet || !newMediaCover.title || !newMediaCover.date || !newMediaCover.type}
                    >
                      ‚ûï Th√™m b√†i vi·∫øt b√°o ch√≠
                    </Button>
                  </div>

                  {/* Media covers list */}
                  <div className="space-y-4">
                    {mediaCovers?.map((cover) => (
                      <div key={cover.id} className="border rounded-lg p-4">
                        <div className="flex justify-between items-start">
                          <div className="flex-1">
                            <div className="flex items-center space-x-2 mb-2">
                              <span className="font-semibold text-primary-green">{cover.outlet}</span>
                              <span className="text-xs bg-primary-green/10 text-primary-green px-2 py-1 rounded-full">
                                {cover.type}
                              </span>
                            </div>
                            <h3 className="font-semibold text-lg mb-1">{cover.title}</h3>
                            <p className="text-sm text-gray-600">{cover.date}</p>
                            {cover.url && (
                              <a
                                href={cover.url}
                                target="_blank"
                                rel="noopener noreferrer"
                                className="text-primary-green hover:underline text-sm mt-1 block"
                              >
                                üîó Xem b√†i vi·∫øt
                              </a>
                            )}
                          </div>
                          <div className="flex space-x-2">
                            <Button
                              size="sm"
                              variant="outline"
                              onClick={() => setEditingMediaCover(cover)}
                              className="text-blue-600 hover:text-blue-800"
                            >
                              ‚úèÔ∏è S·ª≠a
                            </Button>
                            <Button
                              size="sm"
                              variant="outline"
                              onClick={() => deleteMediaCoverMutation.mutate(cover.id)}
                              className="text-red-600 hover:text-red-800"
                            >
                              üóëÔ∏è X√≥a
                            </Button>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="social-media">
            <Card>
              <CardHeader>
                <CardTitle>üåê M·∫°ng x√£ h·ªôi</CardTitle>
                <CardDescription>Qu·∫£n l√Ω c√°c k√™nh m·∫°ng x√£ h·ªôi c·ªßa tr∆∞·ªùng</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-6">
                  <div className="text-center p-8 bg-gray-50 rounded-lg">
                    <p className="text-lg font-semibold mb-4">üîß Ch·ª©c nƒÉng qu·∫£n l√Ω m·∫°ng x√£ h·ªôi</p>
                    <p className="text-gray-600 mb-4">
                      T√≠nh nƒÉng n√†y s·∫Ω cho ph√©p b·∫°n:
                    </p>
                    <ul className="text-left max-w-md mx-auto space-y-2 text-gray-700">
                      <li>‚Ä¢ Th√™m v√† ch·ªânh s·ª≠a li√™n k·∫øt Facebook</li>
                      <li>‚Ä¢ Qu·∫£n l√Ω k√™nh YouTube</li>
                      <li>‚Ä¢ C·∫≠p nh·∫≠t t√†i kho·∫£n Instagram</li>
                      <li>‚Ä¢ Thay ƒë·ªïi s·ªë l∆∞·ª£ng ng∆∞·ªùi theo d√µi</li>
                      <li>‚Ä¢ B·∫≠t/t·∫Øt hi·ªÉn th·ªã t·ª´ng k√™nh</li>
                    </ul>
                    <p className="text-sm text-gray-500 mt-4">
                      C√°c k√™nh m·∫°ng x√£ h·ªôi s·∫Ω hi·ªÉn th·ªã tr√™n trang ch·ªß ƒë·ªÉ ph·ª• huynh c√≥ th·ªÉ theo d√µi
                    </p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>

      {/* Edit Article Modal */}
      <Dialog open={!!editingArticle} onOpenChange={() => setEditingArticle(null)}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>‚úèÔ∏è Ch·ªânh s·ª≠a b√†i vi·∫øt</DialogTitle>
          </DialogHeader>
          {editingArticle && (
            <div className="space-y-4">
              <div>
                <Label htmlFor="edit-title">üì∞ Ti√™u ƒë·ªÅ</Label>
                <Input
                  id="edit-title"
                  value={editingArticle.title}
                  onChange={(e) => setEditingArticle({ ...editingArticle, title: e.target.value })}
                  placeholder="Nh·∫≠p ti√™u ƒë·ªÅ b√†i vi·∫øt..."
                />
              </div>
              <div>
                <Label htmlFor="edit-category">üìÇ Danh m·ª•c</Label>
                <select
                  id="edit-category"
                  value={editingArticle.category}
                  onChange={(e) => setEditingArticle({ ...editingArticle, category: e.target.value })}
                  className="w-full p-2 border rounded-md"
                >
                  <option value="news">üì∞ Tin t·ª©c</option>
                  <option value="announcement">üì¢ Th√¥ng b√°o</option>
                  <option value="event">üéâ S·ª± ki·ªán</option>
                </select>
              </div>
              <div>
                <Label htmlFor="edit-image">üñºÔ∏è ·∫¢nh b√†i vi·∫øt</Label>
                <Input
                  type="file"
                  accept="image/*"
                  onChange={(e) => {
                    const file = e.target.files?.[0];
                    if (file) {
                      const reader = new FileReader();
                      reader.onload = (e) => {
                        const result = e.target?.result as string;
                        setEditingArticle({ ...editingArticle, imageUrl: result });
                      };
                      reader.readAsDataURL(file);
                    }
                  }}
                  className="cursor-pointer"
                />
                {editingArticle.imageUrl && (
                  <div className="mt-2 border rounded-lg p-2">
                    <img src={editingArticle.imageUrl} alt="Article" className="max-w-full h-32 object-cover" />
                  </div>
                )}
              </div>
              <div>
                <Label htmlFor="edit-excerpt">üìÑ T√≥m t·∫Øt</Label>
                <Textarea
                  id="edit-excerpt"
                  value={editingArticle.excerpt || ""}
                  onChange={(e) => setEditingArticle({ ...editingArticle, excerpt: e.target.value })}
                  rows={3}
                  placeholder="Nh·∫≠p t√≥m t·∫Øt b√†i vi·∫øt..."
                />
              </div>
              <div>
                <Label htmlFor="edit-content">üìù N·ªôi dung</Label>
                <Textarea
                  id="edit-content"
                  value={editingArticle.content}
                  onChange={(e) => setEditingArticle({ ...editingArticle, content: e.target.value })}
                  rows={6}
                  placeholder="Nh·∫≠p n·ªôi dung b√†i vi·∫øt..."
                />
              </div>
              <div className="flex space-x-2">
                <Button
                  onClick={() => updateArticleMutation.mutate(editingArticle)}
                  disabled={updateArticleMutation.isPending}
                  className="flex-1"
                >
                  {updateArticleMutation.isPending ? "ƒêang c·∫≠p nh·∫≠t..." : "üíæ C·∫≠p nh·∫≠t b√†i vi·∫øt"}
                </Button>
                <Button
                  variant="outline"
                  onClick={() => setEditingArticle(null)}
                  className="flex-1"
                >
                  ‚ùå H·ªßy
                </Button>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>

      {/* Edit Program Modal */}
      <Dialog open={!!editingProgram} onOpenChange={() => setEditingProgram(null)}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>‚úèÔ∏è Ch·ªânh s·ª≠a ch∆∞∆°ng tr√¨nh</DialogTitle>
          </DialogHeader>
          {editingProgram && (
            <div className="space-y-4">
              <div>
                <Label htmlFor="edit-program-name">üìö T√™n ch∆∞∆°ng tr√¨nh</Label>
                <Input
                  id="edit-program-name"
                  value={editingProgram.name}
                  onChange={(e) => setEditingProgram({ ...editingProgram, name: e.target.value })}
                  placeholder="Nh·∫≠p t√™n ch∆∞∆°ng tr√¨nh..."
                />
              </div>
              <div>
                <Label htmlFor="edit-program-description">üìù M√¥ t·∫£</Label>
                <Textarea
                  id="edit-program-description"
                  value={editingProgram.description}
                  onChange={(e) => setEditingProgram({ ...editingProgram, description: e.target.value })}
                  rows={4}
                  placeholder="Nh·∫≠p m√¥ t·∫£ ch∆∞∆°ng tr√¨nh..."
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="edit-program-age">üë∂ ƒê·ªô tu·ªïi</Label>
                  <Input
                    id="edit-program-age"
                    value={editingProgram.ageRange}
                    onChange={(e) => setEditingProgram({ ...editingProgram, ageRange: e.target.value })}
                    placeholder="VD: 2-3 tu·ªïi"
                  />
                </div>
                <div>
                  <Label htmlFor="edit-program-capacity">üë• S·ªâ s·ªë</Label>
                  <Input
                    type="number"
                    id="edit-program-capacity"
                    value={editingProgram.capacity}
                    onChange={(e) => setEditingProgram({ ...editingProgram, capacity: parseInt(e.target.value) || 0 })}
                    placeholder="S·ªë h·ªçc sinh"
                  />
                </div>
              </div>
              <div>
                <Label htmlFor="edit-program-tuition">üí∞ H·ªçc ph√≠ (VNƒê)</Label>
                <Input
                  type="number"
                  id="edit-program-tuition"
                  value={editingProgram.tuition}
                  onChange={(e) => setEditingProgram({ ...editingProgram, tuition: parseInt(e.target.value) || 0 })}
                  placeholder="H·ªçc ph√≠ h√†ng th√°ng"
                />
              </div>
              <div className="flex space-x-2">
                <Button
                  onClick={() => updateProgramMutation.mutate(editingProgram)}
                  disabled={updateProgramMutation.isPending}
                  className="flex-1"
                >
                  {updateProgramMutation.isPending ? "ƒêang c·∫≠p nh·∫≠t..." : "üíæ C·∫≠p nh·∫≠t ch∆∞∆°ng tr√¨nh"}
                </Button>
                <Button
                  variant="outline"
                  onClick={() => setEditingProgram(null)}
                  className="flex-1"
                >
                  ‚ùå H·ªßy
                </Button>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>

      {/* Edit Activity Modal */}
      <Dialog open={!!editingActivity} onOpenChange={() => setEditingActivity(null)}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>‚úèÔ∏è Ch·ªânh s·ª≠a ho·∫°t ƒë·ªông</DialogTitle>
          </DialogHeader>
          {editingActivity && (
            <div className="space-y-4">
              <div>
                <Label htmlFor="edit-activity-name">üéØ T√™n ho·∫°t ƒë·ªông</Label>
                <Input
                  id="edit-activity-name"
                  value={editingActivity.name}
                  onChange={(e) => setEditingActivity({ ...editingActivity, name: e.target.value })}
                  placeholder="Nh·∫≠p t√™n ho·∫°t ƒë·ªông..."
                />
              </div>
              <div>
                <Label htmlFor="edit-activity-description">üìù M√¥ t·∫£</Label>
                <Textarea
                  id="edit-activity-description"
                  value={editingActivity.description}
                  onChange={(e) => setEditingActivity({ ...editingActivity, description: e.target.value })}
                  rows={4}
                  placeholder="Nh·∫≠p m√¥ t·∫£ ho·∫°t ƒë·ªông..."
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="edit-activity-date">üìÖ Ng√†y</Label>
                  <Input
                    type="date"
                    id="edit-activity-date"
                    value={editingActivity.date ? new Date(editingActivity.date).toISOString().split('T')[0] : ''}
                    onChange={(e) => setEditingActivity({ ...editingActivity, date: new Date(e.target.value) })}
                  />
                </div>
                <div>
                  <Label htmlFor="edit-activity-location">üìç ƒê·ªãa ƒëi·ªÉm</Label>
                  <Input
                    id="edit-activity-location"
                    value={editingActivity.location || ''}
                    onChange={(e) => setEditingActivity({ ...editingActivity, location: e.target.value })}
                    placeholder="Nh·∫≠p ƒë·ªãa ƒëi·ªÉm..."
                  />
                </div>
              </div>
              <div>
                <Label htmlFor="edit-activity-frequency">üîÑ T·∫ßn su·∫•t</Label>
                <Input
                  id="edit-activity-frequency"
                  value={editingActivity.frequency}
                  onChange={(e) => setEditingActivity({ ...editingActivity, frequency: e.target.value })}
                  placeholder="VD: H√†ng tu·∫ßn, H√†ng th√°ng..."
                />
              </div>
              <div>
                <Label htmlFor="edit-activity-image">üñºÔ∏è ·∫¢nh ho·∫°t ƒë·ªông</Label>
                <Input
                  type="file"
                  accept="image/*"
                  onChange={(e) => {
                    const file = e.target.files?.[0];
                    if (file) {
                      const reader = new FileReader();
                      reader.onload = (e) => {
                        const result = e.target?.result as string;
                        setEditingActivity({ ...editingActivity, imageUrl: result });
                      };
                      reader.readAsDataURL(file);
                    }
                  }}
                  className="cursor-pointer"
                />
                {editingActivity.imageUrl && (
                  <div className="mt-2 border rounded-lg p-2">
                    <img src={editingActivity.imageUrl} alt="Activity" className="max-w-full h-32 object-cover" />
                  </div>
                )}
              </div>
              <div className="flex space-x-2">
                <Button
                  onClick={() => updateActivityMutation.mutate(editingActivity)}
                  disabled={updateActivityMutation.isPending}
                  className="flex-1"
                >
                  {updateActivityMutation.isPending ? "ƒêang c·∫≠p nh·∫≠t..." : "üíæ C·∫≠p nh·∫≠t ho·∫°t ƒë·ªông"}
                </Button>
                <Button
                  variant="outline"
                  onClick={() => setEditingActivity(null)}
                  className="flex-1"
                >
                  ‚ùå H·ªßy
                </Button>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>

      {/* Edit Admission Step Modal */}
      <Dialog open={!!editingAdmissionStep} onOpenChange={() => setEditingAdmissionStep(null)}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>‚úèÔ∏è Ch·ªânh s·ª≠a b∆∞·ªõc tuy·ªÉn sinh</DialogTitle>
          </DialogHeader>
          {editingAdmissionStep && (
            <div className="space-y-4">
              <div>
                <Label htmlFor="edit-step-title">üìù Ti√™u ƒë·ªÅ b∆∞·ªõc</Label>
                <Input
                  id="edit-step-title"
                  value={editingAdmissionStep.title}
                  onChange={(e) => setEditingAdmissionStep({ ...editingAdmissionStep, title: e.target.value })}
                  placeholder="Nh·∫≠p ti√™u ƒë·ªÅ b∆∞·ªõc..."
                />
              </div>
              <div>
                <Label htmlFor="edit-step-description">üìù M√¥ t·∫£</Label>
                <Textarea
                  id="edit-step-description"
                  value={editingAdmissionStep.description}
                  onChange={(e) => setEditingAdmissionStep({ ...editingAdmissionStep, description: e.target.value })}
                  rows={4}
                  placeholder="Nh·∫≠p m√¥ t·∫£ b∆∞·ªõc..."
                />
              </div>
              <div>
                <Label htmlFor="edit-step-number">üî¢ S·ªë th·ª© t·ª±</Label>
                <Input
                  type="number"
                  id="edit-step-number"
                  value={editingAdmissionStep.stepNumber}
                  onChange={(e) => setEditingAdmissionStep({ ...editingAdmissionStep, stepNumber: parseInt(e.target.value) })}
                  min="1"
                  max="10"
                  placeholder="Nh·∫≠p s·ªë th·ª© t·ª±..."
                />
              </div>
              <div>
                <Label htmlFor="edit-step-icon">üñºÔ∏è Icon/H√¨nh ·∫£nh</Label>
                <Input
                  type="file"
                  accept="image/*"
                  onChange={handleImageUpload('admission-step')}
                  className="cursor-pointer"
                />
                {editingAdmissionStep.iconUrl && (
                  <div className="mt-2 border rounded-lg p-2">
                    <img src={editingAdmissionStep.iconUrl} alt="Step Icon" className="max-w-full h-32 object-cover rounded" />
                  </div>
                )}
              </div>
              <div className="flex space-x-2">
                <Button
                  onClick={() => updateAdmissionStepMutation.mutate(editingAdmissionStep)}
                  disabled={updateAdmissionStepMutation.isPending}
                  className="flex-1"
                >
                  {updateAdmissionStepMutation.isPending ? "ƒêang c·∫≠p nh·∫≠t..." : "üíæ C·∫≠p nh·∫≠t b∆∞·ªõc"}
                </Button>
                <Button
                  variant="outline"
                  onClick={() => setEditingAdmissionStep(null)}
                  className="flex-1"
                >
                  ‚ùå H·ªßy
                </Button>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>

      {/* Edit Media Cover Modal */}
      <Dialog open={!!editingMediaCover} onOpenChange={() => setEditingMediaCover(null)}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>‚úèÔ∏è Ch·ªânh s·ª≠a b√†i vi·∫øt b√°o ch√≠</DialogTitle>
          </DialogHeader>
          {editingMediaCover && (
            <div className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="edit-outlet">üì∫ T√™n b√°o/ƒë√†i</Label>
                  <Input
                    id="edit-outlet"
                    value={editingMediaCover.outlet}
                    onChange={(e) => setEditingMediaCover({ ...editingMediaCover, outlet: e.target.value })}
                    placeholder="VD: VTV1, Tu·ªïi Tr·∫ª, VnExpress..."
                  />
                </div>
                <div>
                  <Label htmlFor="edit-type">üì± Lo·∫°i b√°o ch√≠</Label>
                  <select
                    id="edit-type"
                    value={editingMediaCover.type}
                    onChange={(e) => setEditingMediaCover({ ...editingMediaCover, type: e.target.value })}
                    className="w-full p-2 border rounded-md"
                  >
                    <option value="">Ch·ªçn lo·∫°i</option>
                    <option value="TV">üì∫ Truy·ªÅn h√¨nh</option>
                    <option value="B√°o">üì∞ B√°o gi·∫•y</option>
                    <option value="Online">üíª Online</option>
                    <option value="Radio">üìª Radio</option>
                  </select>
                </div>
                <div>
                  <Label htmlFor="edit-title">üìù Ti√™u ƒë·ªÅ b√†i vi·∫øt</Label>
                  <Input
                    id="edit-title"
                    value={editingMediaCover.title}
                    onChange={(e) => setEditingMediaCover({ ...editingMediaCover, title: e.target.value })}
                    placeholder="Nh·∫≠p ti√™u ƒë·ªÅ b√†i vi·∫øt..."
                  />
                </div>
                <div>
                  <Label htmlFor="edit-date">üìÖ Ng√†y ƒëƒÉng</Label>
                  <Input
                    id="edit-date"
                    value={editingMediaCover.date}
                    onChange={(e) => setEditingMediaCover({ ...editingMediaCover, date: e.target.value })}
                    placeholder="VD: 20/11/2024"
                  />
                </div>
                <div className="col-span-2">
                  <Label htmlFor="edit-url">üîó Link b√†i vi·∫øt (t√πy ch·ªçn)</Label>
                  <Input
                    id="edit-url"
                    value={editingMediaCover.url || ""}
                    onChange={(e) => setEditingMediaCover({ ...editingMediaCover, url: e.target.value })}
                    placeholder="https://..."
                  />
                </div>
              </div>
              <div className="flex space-x-2">
                <Button
                  onClick={() => updateMediaCoverMutation.mutate(editingMediaCover)}
                  disabled={updateMediaCoverMutation.isPending}
                  className="flex-1"
                >
                  {updateMediaCoverMutation.isPending ? "ƒêang c·∫≠p nh·∫≠t..." : "üíæ C·∫≠p nh·∫≠t b√†i vi·∫øt"}
                </Button>
                <Button
                  variant="outline"
                  onClick={() => setEditingMediaCover(null)}
                  className="flex-1"
                >
                  ‚ùå H·ªßy
                </Button>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>
    </div>
  );
}