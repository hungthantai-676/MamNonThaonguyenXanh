import { useState } from "react";
import { useMutation } from "@tanstack/react-query";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Copy, Download, QrCode, Wallet, Users, Gift } from "lucide-react";

const affiliateRegisterSchema = z.object({
  name: z.string().min(2, "T√™n ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±"),
  phone: z.string().min(10, "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá"),
  email: z.string().email("Email kh√¥ng h·ª£p l·ªá").optional().or(z.literal("")),
  memberType: z.enum(["teacher", "parent"], { required_error: "Vui l√≤ng ch·ªçn vai tr√≤" }),
  categoryName: z.string().min(1, "Vui l√≤ng ch·ªçn danh m·ª•c"),
  sponsorId: z.string().optional()
});

type AffiliateRegisterForm = z.infer<typeof affiliateRegisterSchema>;

interface RegistrationResult {
  memberId: string;
  username: string;
  name: string;
  referralLink: string;
  qrCode: string;
  walletAddress: string;
}

export default function AffiliateRegister() {
  const [registrationResult, setRegistrationResult] = useState<RegistrationResult | null>(null);
  const { toast } = useToast();

  const form = useForm<AffiliateRegisterForm>({
    resolver: zodResolver(affiliateRegisterSchema),
    defaultValues: {
      name: "",
      phone: "",
      email: "",
      memberType: undefined,
      categoryName: "",
      sponsorId: ""
    }
  });

  const registerMutation = useMutation({
    mutationFn: async (data: AffiliateRegisterForm) => {
      const response = await apiRequest("POST", "/api/affiliate/register", data);
      return response.json();
    },
    onSuccess: (data) => {
      if (data.success) {
        setRegistrationResult(data.member);
        toast({
          title: "ƒêƒÉng k√Ω th√†nh c√¥ng!",
          description: "Ch√∫c m·ª´ng b·∫°n ƒë√£ tr·ªü th√†nh th√†nh vi√™n affiliate",
        });
      }
    },
    onError: (error: any) => {
      toast({
        title: "ƒêƒÉng k√Ω th·∫•t b·∫°i",
        description: error.message || "C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i",
        variant: "destructive",
      });
    }
  });

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
    toast({
      title: "ƒê√£ sao ch√©p!",
      description: "Link ƒë√£ ƒë∆∞·ª£c sao ch√©p v√†o clipboard",
    });
  };

  const onSubmit = (data: AffiliateRegisterForm) => {
    registerMutation.mutate(data);
  };

  if (registrationResult) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-green-50 to-blue-50 py-12">
        <div className="container mx-auto px-4">
          <div className="max-w-4xl mx-auto">
            <Card className="border-0 shadow-2xl">
              <CardHeader className="bg-gradient-to-r from-primary-green to-green-600 text-white text-center py-8">
                <CardTitle className="text-3xl font-bold flex items-center justify-center gap-3">
                  <Gift className="w-8 h-8" />
                  ƒêƒÉng k√Ω th√†nh c√¥ng!
                </CardTitle>
                <p className="mt-2 text-green-100">Ch√∫c m·ª´ng b·∫°n ƒë√£ tr·ªü th√†nh th√†nh vi√™n ch∆∞∆°ng tr√¨nh affiliate</p>
              </CardHeader>
              
              <CardContent className="p-8">
                <div className="grid md:grid-cols-2 gap-8">
                  {/* Account Info */}
                  <div className="space-y-6">
                    <div className="bg-gray-50 rounded-lg p-6">
                      <h3 className="font-semibold text-lg mb-4 flex items-center gap-2">
                        <Users className="w-5 h-5 text-primary-green" />
                        Th√¥ng tin t√†i kho·∫£n
                      </h3>
                      <div className="space-y-3">
                        <div>
                          <label className="text-sm font-medium text-gray-600">M√£ th√†nh vi√™n:</label>
                          <p className="font-bold text-lg text-primary-green">{registrationResult.memberId}</p>
                        </div>
                        <div>
                          <label className="text-sm font-medium text-gray-600">T√™n ƒëƒÉng nh·∫≠p:</label>
                          <p className="font-semibold">{registrationResult.username}</p>
                        </div>
                        <div>
                          <label className="text-sm font-medium text-gray-600">M·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh:</label>
                          <p className="font-mono bg-yellow-100 px-2 py-1 rounded text-yellow-800">123456</p>
                          <p className="text-xs text-red-600 mt-1">‚ö†Ô∏è Vui l√≤ng ƒë·ªïi m·∫≠t kh·∫©u sau khi ƒëƒÉng nh·∫≠p</p>
                        </div>
                      </div>
                    </div>

                    {/* Wallet Info */}
                    <div className="bg-blue-50 rounded-lg p-6">
                      <h3 className="font-semibold text-lg mb-4 flex items-center gap-2">
                        <Wallet className="w-5 h-5 text-blue-600" />
                        V√≠ ƒëi·ªán t·ª≠ c√° nh√¢n
                      </h3>
                      <div className="space-y-3">
                        <div>
                          <label className="text-sm font-medium text-gray-600">ƒê·ªãa ch·ªâ v√≠:</label>
                          <div className="flex items-center gap-2 mt-1">
                            <code className="bg-white px-2 py-1 rounded text-xs font-mono flex-1 break-all">
                              {registrationResult.walletAddress}
                            </code>
                            <Button
                              size="sm"
                              variant="outline"
                              onClick={() => copyToClipboard(registrationResult.walletAddress)}
                            >
                              <Copy className="w-4 h-4" />
                            </Button>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>

                  {/* QR Code & Referral Link */}
                  <div className="space-y-6">
                    <div className="bg-gray-50 rounded-lg p-6 text-center">
                      <h3 className="font-semibold text-lg mb-4 flex items-center justify-center gap-2">
                        <QrCode className="w-5 h-5 text-primary-green" />
                        QR Code c·ªßa b·∫°n
                      </h3>
                      {registrationResult.qrCode && (
                        <div className="space-y-4">
                          <img 
                            src={registrationResult.qrCode} 
                            alt="QR Code" 
                            className="mx-auto w-48 h-48 border rounded-lg"
                          />
                          <Button
                            variant="outline"
                            onClick={() => {
                              const link = document.createElement('a');
                              link.href = registrationResult.qrCode;
                              link.download = `QR-${registrationResult.memberId}.png`;
                              link.click();
                            }}
                          >
                            <Download className="w-4 h-4 mr-2" />
                            T·∫£i QR Code
                          </Button>
                        </div>
                      )}
                    </div>

                    {/* Referral Link */}
                    <div className="bg-green-50 rounded-lg p-6">
                      <h3 className="font-semibold text-lg mb-4">Link gi·ªõi thi·ªáu</h3>
                      <div className="flex items-center gap-2">
                        <Input
                          value={registrationResult.referralLink}
                          readOnly
                          className="bg-white font-mono text-sm"
                        />
                        <Button
                          onClick={() => copyToClipboard(registrationResult.referralLink)}
                        >
                          <Copy className="w-4 h-4" />
                        </Button>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Next Steps */}
                <div className="mt-8 bg-yellow-50 border border-yellow-200 rounded-lg p-6">
                  <h3 className="font-semibold text-lg mb-4 text-yellow-800">üéØ B∆∞·ªõc ti·∫øp theo</h3>
                  <ul className="space-y-2 text-yellow-700">
                    <li>‚úÖ L∆∞u th√¥ng tin t√†i kho·∫£n m·ªôt c√°ch an to√†n</li>
                    <li>üîë ƒêƒÉng nh·∫≠p v√† ƒë·ªïi m·∫≠t kh·∫©u m·ªõi</li>
                    <li>üì± Chia s·∫ª QR Code ho·∫∑c link gi·ªõi thi·ªáu</li>
                    <li>üí∞ B·∫Øt ƒë·∫ßu ki·∫øm th∆∞·ªüng t·ª´ vi·ªác gi·ªõi thi·ªáu h·ªçc sinh</li>
                  </ul>
                </div>

                <div className="mt-6 text-center">
                  <Button 
                    size="lg"
                    onClick={() => window.location.href = '/affiliate-login'}
                    className="bg-primary-green hover:bg-green-600"
                  >
                    ƒêƒÉng nh·∫≠p ngay
                  </Button>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 to-blue-50 py-12">
      <div className="container mx-auto px-4">
        <div className="max-w-2xl mx-auto">
          <Card className="border-0 shadow-2xl">
            <CardHeader className="bg-gradient-to-r from-primary-green to-green-600 text-white text-center py-8">
              <CardTitle className="text-3xl font-bold">üéØ ƒêƒÉng K√Ω Ch∆∞∆°ng Tr√¨nh Affiliate</CardTitle>
              <p className="mt-2 text-green-100">Ki·∫øm th∆∞·ªüng t·ª´ vi·ªác gi·ªõi thi·ªáu h·ªçc sinh</p>
            </CardHeader>
            
            <CardContent className="p-8">
              {/* Reward Info */}
              <div className="grid md:grid-cols-2 gap-4 mb-8">
                <div className="bg-blue-50 rounded-lg p-4 text-center">
                  <div className="text-2xl font-bold text-blue-600">2M VND</div>
                  <div className="text-sm text-blue-800">Th∆∞·ªüng m·ªói h·ªçc sinh (Gi√°o vi√™n)</div>
                </div>
                <div className="bg-purple-50 rounded-lg p-4 text-center">
                  <div className="text-2xl font-bold text-purple-600">2,000 ƒëi·ªÉm</div>
                  <div className="text-sm text-purple-800">Th∆∞·ªüng m·ªói h·ªçc sinh (Ph·ª• huynh)</div>
                </div>
              </div>

              <Form {...form}>
                <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
                  <FormField
                    control={form.control}
                    name="name"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>H·ªç v√† t√™n *</FormLabel>
                        <FormControl>
                          <Input placeholder="Nh·∫≠p h·ªç v√† t√™n" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="phone"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>S·ªë ƒëi·ªán tho·∫°i *</FormLabel>
                        <FormControl>
                          <Input placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="email"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Email</FormLabel>
                        <FormControl>
                          <Input placeholder="Nh·∫≠p email (kh√¥ng b·∫Øt bu·ªôc)" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="memberType"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Vai tr√≤ *</FormLabel>
                        <Select onValueChange={field.onChange} defaultValue={field.value}>
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue placeholder="Ch·ªçn vai tr√≤ c·ªßa b·∫°n" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            <SelectItem value="teacher">Gi√°o vi√™n / Nh√¢n vi√™n</SelectItem>
                            <SelectItem value="parent">Ph·ª• huynh</SelectItem>
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="categoryName"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Danh m·ª•c *</FormLabel>
                        <Select onValueChange={field.onChange} defaultValue={field.value}>
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue placeholder="Ch·ªçn danh m·ª•c" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            <SelectItem value="ChƒÉm s√≥c ph·ª• huynh">ChƒÉm s√≥c ph·ª• huynh</SelectItem>
                            <SelectItem value="ƒê·∫°i s·ª© th∆∞∆°ng hi·ªáu">ƒê·∫°i s·ª© th∆∞∆°ng hi·ªáu</SelectItem>
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="sponsorId"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>M√£ ng∆∞·ªùi gi·ªõi thi·ªáu</FormLabel>
                        <FormControl>
                          <Input placeholder="Nh·∫≠p m√£ ng∆∞·ªùi gi·ªõi thi·ªáu (n·∫øu c√≥)" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <Button
                    type="submit"
                    className="w-full bg-primary-green hover:bg-green-600 py-3 text-lg"
                    disabled={registerMutation.isPending}
                  >
                    {registerMutation.isPending ? "ƒêang ƒëƒÉng k√Ω..." : "ƒêƒÉng k√Ω ngay"}
                  </Button>
                </form>
              </Form>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}